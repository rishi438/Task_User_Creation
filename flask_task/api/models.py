from datetime import datetime
from uuid import uuid4

from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import check_password_hash, generate_password_hash

from flask_task.utils.constants import TaskType, UserType

db = SQLAlchemy()


class User(db.Model):
    """
    Defines a User model for interacting with the database.
    Parameters:
        - user_id (str): UUID of the user, auto-generated by default.
        - username (str): A unique and non-nullable username for the user.
        - mobile_number (str): The user's mobile number, nullable.
        - role (UserType): The role of the user, default is 1 (standard user).
        - password_hash (str): The hashed password of the user.
        - last_modified (datetime): The timestamp for the last modification,
        auto-updated.
        - created_date (datetime): The timestamp for the creation, set at
        creation time.
    Returns:
        - None
    Example:
        - Creating a new user:
        user = User(username="john_doe", password_hash="hashed_password")
    """

    user_id = db.Column(
        db.String(36), primary_key=True, default=lambda: str(uuid4())
    )
    username = db.Column(db.String(36), unique=True, nullable=False)
    mobile_number = db.Column(db.String(36), nullable=True)
    role = db.Column(db.Enum(UserType), default=1)
    password_hash = db.Column(db.String(128), nullable=False)
    last_modified = db.Column(
        db.DateTime,
        default=datetime.now,
        onupdate=datetime.now,
        nullable=False,
    )
    created_date = db.Column(db.DateTime, default=datetime.now, nullable=False)

    def set_password(self, password):
        """
        Sets the user's password hash.
        Parameters:
            - password (str): The plaintext password to be hashed.
        Returns:
            - None
        Example:
            set_password('my_secure_password') -> None
        """

        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """
        Verify if the provided password matches the stored hashed password.
        Parameters:
            - password (str): The plain text password to check against
            the stored hash.
        Returns:
            - bool: True if the password matches the hash, False otherwise.
        function("my_secure_password") -> True
            - This example checks if "my_secure_password" matches the stored
            hashed password and returns True if it matches.
        """

        return check_password_hash(self.password_hash, password)


class Task(db.Model):
    """
    Defines the Task model schema for database storage.
    Parameters:
        - None: This is a class definition and does not take
        parameters directly.
    Returns:
        - None: This class does not have a return value.
    Example:
        - Task(task_id="123e4567-e89b-12d3-a456-426614174000",
            status=TaskType.TODO,
            created_user="123e4567-e89b-12d3-a456-426614174001",
            created_for="123e4567-e89b-12d3-a456-426614174002",
            last_modified=datetime.now(),
            created_date=datetime.now())
    """

    task_id = db.Column(
        db.String(36),
        primary_key=True,
        unique=True,
        default=lambda: str(uuid4()),
        nullable=False,
    )
    status = db.Column(db.Enum(TaskType), default=0)
    created_user = db.Column(
        db.String(36), db.ForeignKey("user.user_id"), nullable=False
    )
    created_for = db.Column(
        db.String(36), db.ForeignKey("user.user_id"), nullable=False
    )
    last_modified = db.Column(
        db.DateTime,
        default=datetime.now,
        onupdate=datetime.now,
        nullable=False,
    )
    created_date = db.Column(db.DateTime, default=datetime.now, nullable=False)
